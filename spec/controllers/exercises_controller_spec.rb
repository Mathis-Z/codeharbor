# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ExercisesController, type: :controller do
  let(:user) { create(:user) }
  let(:cart) { create(:cart, user: user, exercises: []) }
  let(:collection) { create(:collection, users: [user], exercises: []) }
  # This should return the minimal set of attributes required to create a valid
  # Exercise. As you add validations to Exercise, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    FactoryBot.attributes_for(:only_meta_data, user: user).merge(
      descriptions_attributes: {'0' => FactoryBot.attributes_for(:simple_description, :primary)}
    )
  end

  let(:invalid_attributes) do
    {title: ''}
  end

  # Duplicate Exercise

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ExercisesController. Be sure to keep this updated too.
  let(:valid_session) do
    {user_id: user.id}
  end

  describe 'GET #index (My Exercises)' do
    subject(:get_request) { get :index, params: params, session: valid_session }

    let(:get_request_without_params) { get :index, params: {}, session: valid_session }
    let!(:exercise) { create(:simple_exercise, valid_attributes) }
    let(:params) { {} }

    it 'shows all Exercises of that user' do
      get_request
      expect(assigns(:exercises)).to contain_exactly exercise
    end

    context 'when user has multiple exercises' do
      before { create(:simple_exercise, valid_attributes) }

      it 'shows all Exercises of that user' do
        get_request
        expect(assigns(:exercises).size).to eq 2
      end

      context 'when a filter is used' do
        let(:params) { {search: 'filter'} }
        let!(:exercise) { create(:simple_exercise, user: user, title: 'filter me') }

        it 'shows the matching Exercise' do
          get_request
          expect(assigns(:exercises)).to contain_exactly exercise
        end

        context 'when a second request without searchparams is made' do
          it 'shows the matching Exercise' do
            get_request
            get_request_without_params
            expect(assigns(:exercises)).to contain_exactly exercise
          end
        end
      end
    end
  end

  describe 'GET #show' do
    let!(:exercise) { create(:simple_exercise, valid_attributes) }

    it 'assigns the requested exercise as @exercise' do
      get :show, params: {id: exercise.to_param}, session: valid_session
      expect(assigns(:exercise)).to eq(exercise)
    end
  end

  describe 'GET #new' do
    it 'assigns a new exercise as @exercise' do
      get :new, params: {}, session: valid_session
      expect(assigns(:exercise)).to be_a_new(Exercise)
    end
  end

  describe 'GET #edit' do
    let!(:exercise) { create(:simple_exercise, valid_attributes) }

    it 'assigns the requested exercise as @exercise' do
      get :edit, params: {id: exercise.to_param}, session: valid_session
      expect(assigns(:exercise)).to eq(exercise)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      let(:valid_params) do
        {
          title: 'title',
          descriptions_attributes: {'0' => {text: 'description', primary: true}},
          execution_environment_id: create(:java_8_execution_environment).id,
          license_id: create(:license)
        }
      end

      it 'creates a new Exercise' do
        expect do
          post :create, params: {exercise: valid_params}, session: valid_session
        end.to change(Exercise, :count).by(1)
      end

      it 'assigns a newly created exercise as @exercise' do
        post :create, params: {exercise: valid_params}, session: valid_session
        expect(assigns(:exercise)).to be_persisted
      end

      it 'redirects to the created exercise' do
        post :create, params: {exercise: valid_params}, session: valid_session
        expect(response).to redirect_to(Exercise.last)
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved exercise as @exercise' do
        post :create, params: {exercise: invalid_attributes}, session: valid_session
        expect(assigns(:exercise)).to be_a_new(Exercise)
      end

      it "re-renders the 'new' template" do
        post :create, params: {exercise: invalid_attributes}, session: valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    let(:update_attributes) do
      FactoryBot.attributes_for(:only_meta_data, user: user).merge(
        descriptions_attributes: {'0' => FactoryBot.attributes_for(:simple_description)},
        title: 'new_title'
      )
    end
    let!(:exercise) { create(:simple_exercise, valid_attributes) }

    context 'with valid params' do
      it 'updates the requested exercise' do
        put :update, params: {id: exercise.to_param, exercise: update_attributes}, session: valid_session
        exercise.reload
        expect(exercise.title).to eq 'new_title'
      end

      it 'assigns the requested exercise as @exercise' do
        put :update, params: {id: exercise.to_param, exercise: update_attributes}, session: valid_session
        expect(assigns(:exercise)).to eq(exercise)
      end

      it 'redirects to the exercise' do
        put :update, params: {id: exercise.to_param, exercise: update_attributes}, session: valid_session
        expect(response).to redirect_to(exercise)
      end

      it 'creates a predecessor of the exercise' do
        expect { put :update, params: {id: exercise.to_param, exercise: update_attributes}, session: valid_session }.to change {
          exercise.reload.predecessor
        }.from(nil).to(be_an Exercise)
      end

      context 'when exercise has a test' do
        let(:test) { create(:codeharbor_test) }
        let!(:exercise) { create(:simple_exercise, update_attributes.merge(tests: [test], descriptions: [build(:description, :primary)])) }

        let(:new_attributes) { {title: 'new title', tests_attributes: tests_attributes} }
        let(:tests_attributes) { {'0' => test.attributes.merge('exercise_file_attributes' => test.exercise_file.attributes)} }

        let(:put_update) { put :update, params: {id: exercise.to_param, exercise: new_attributes}, session: valid_session }

        it 'updates the requested exercise' do
          expect { put_update }.to change { exercise.reload.title }.to('new title')
        end
      end
    end

    context 'with invalid params' do
      it 'assigns the exercise as @exercise' do
        put :update, params: {id: exercise.to_param, exercise: invalid_attributes}, session: valid_session
        expect(assigns(:exercise)).to eq(exercise)
      end

      it "re-renders the 'edit' template" do
        put :update, params: {id: exercise.to_param, exercise: invalid_attributes}, session: valid_session
        expect(response).to render_template('edit')
      end
    end

    context 'when exercise has a state' do
      before { exercise.update(state_list: 'new') }

      let(:put_update) { put :update, params: {id: exercise.to_param, exercise: {title: 'updated title'}}, session: valid_session }

      it 'removes the state' do
        expect { put_update }.to change { exercise.reload.state_list }.from(['new']).to(be_empty)
      end
    end
  end

  describe 'DELETE #destroy' do
    let!(:exercise) { create(:simple_exercise, valid_attributes) }

    it 'destroys the requested exercise' do
      expect do
        delete :destroy, params: {id: exercise.to_param}, session: valid_session
      end.to change(Exercise, :count).by(-1)
    end

    it 'redirects to the exercises list' do
      delete :destroy, params: {id: exercise.to_param}, session: valid_session
      expect(response).to redirect_to(exercises_url)
    end
  end

  describe 'GET #exercises_all' do
    let!(:exercise) { create(:simple_exercise, valid_attributes) }

    it 'assigns all exercises as @exercises' do
      get :exercises_all, params: {}, session: valid_session
      expect(assigns(:exercises)).to eq([exercise])
    end
  end

  describe 'POST #add_to_cart' do
    let!(:exercise) { create(:simple_exercise, valid_attributes) }

    it 'adds exercise to cart' do
      expect do
        post :add_to_cart, params: {id: exercise.to_param}, session: valid_session
      end.to change(cart.exercises, :count).by(+1)
    end
  end

  describe 'POST #add_to_collection' do
    let!(:exercise) { create(:simple_exercise, valid_attributes) }

    it 'adds exercise to collection' do
      expect do
        post :add_to_collection, params: {id: exercise.to_param, collection: collection.id}, session: valid_session
      end.to change(collection.exercises, :count).by(+1)
    end
  end

  describe 'POST #remove_state' do
    let!(:exercise) { create(:simple_exercise, user: user, state_list: state_list) }
    let(:state_list) {}
    let(:post_query) { post :remove_state, params: {id: exercise.to_param}, session: valid_session }

    it 'does not change states' do
      expect { post_query }.not_to(change { exercise.reload.state_list })
    end

    context 'when exercise has new-state' do
      let(:state_list) { 'new' }

      it 'does not change states' do
        expect { post_query }.to change { exercise.reload.state_list }.from(['new']).to([])
      end
    end

    context 'when exercise has updated-state' do
      let(:state_list) { 'updated' }

      it 'does not change states' do
        expect { post_query }.to change { exercise.reload.state_list }.from(['updated']).to([])
      end
    end
  end

  describe 'POST #import_exercise' do
    let(:post_query) { post :import_exercise, params: params, session: valid_session }
    let(:params) { {} }

    before do
      create(:file_type, file_extension: '.java')
    end

    it 'returns an error' do
      expect { post_query }.to raise_error(I18n.t('controllers.exercise.choose_file'))
    end

    context 'when a valid zip file is submitted' do
      let(:params) { {file_upload: fixture_file_upload('files/proforma_import/testfile.zip', 'application/zip')} }

      it 'imports the exercise' do
        expect { post_query }.to change(Exercise, :count).by(1)
      end

      it 'redirects to imported exercise' do
        expect(post_query).to redirect_to action: :show, id: Exercise.last.id
      end

      it 'flashes import success' do
        expect(post_query.request.flash[:notice]).to eql I18n.t('controllers.exercise.import_proforma_xml.single_import_successful')
      end
    end

    context 'when an invalid zip file is submitted' do
      let(:params) { {file_upload: fixture_file_upload('files/proforma_import/testfile_fail.zip', 'application/zip')} }

      it 'redirects to index' do
        expect(post_query).to redirect_to action: :index
      end

      it 'flashes import error' do
        expect(post_query.request.flash[:alert]).to eql I18n.t('controllers.exercise.import_proforma_xml.no_file_present')
      end
    end

    context 'when an zip with an invalid xml file is submitted' do
      let(:params) { {file_upload: fixture_file_upload('files/proforma_import/testfile_fail_xml.zip', 'application/zip')} }

      it 'redirects to index' do
        expect(post_query).to redirect_to action: :index
      end

      it 'flashes import error' do
        expect(post_query.request.flash[:alert]).to eql I18n.t('controllers.exercise.import_proforma_xml.import_error')
      end
    end

    context 'when an invalid file is submitted' do
      let(:params) { {file_upload: fixture_file_upload('files/proforma_import/testfile_fail', 'application/txt')} }

      it 'redirects to index' do
        expect(post_query).to redirect_to action: :index
      end

      it 'flashes import error' do
        expect(post_query.request.flash[:alert]).to eql I18n.t('controllers.exercise.import_proforma_xml.import_error')
      end
    end

    context 'when the zip file includes multiple exercises' do
      let(:params) { {file_upload: fixture_file_upload('files/proforma_import/testfile_multi.zip', 'application/zip')} }

      it 'imports the exercises' do
        expect { post_query }.to change(Exercise, :count).by(3)
      end

      it 'redirects to index' do
        expect(post_query).to redirect_to action: :index
      end

      it 'flashes import success' do
        expect(post_query.request.flash[:notice]).to eql I18n
          .t('controllers.exercise.import_proforma_xml.multi_import_successful', count: 3)
      end
    end
  end

  fdescribe '#download_exercise' do
    let(:exercise) { create(:simple_exercise) }

    let(:get_request) { get :download_exercise, params: {id: exercise.id}, session: valid_session }
    let(:zip) { double(string: 'abcdefg') }

    before { allow(ProformaService::ExportTask).to receive(:call).with(exercise: exercise).and_return(zip) }

    it do
      get_request
      expect(ProformaService::ExportTask).to have_received(:call)
    end
  end
end
