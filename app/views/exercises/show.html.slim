- model_class = Exercise
.header style=("clear: both")
  .col-md-9
    .std-heading
      i.i.fa.fa-file-text-o style=("color: #008000")
      = ' ' + @exercise.title
  .col-md-3
    span.star-rating
      - [*1..5].each do |i|
        - if @exercise.round_avg_rating >= i
          span.fa.fa-star data-rating=i
        - elsif (@exercise.round_avg_rating + 0.5) >= i
          span.fa.fa-star-half-o data-rating=i
        - else
          span.fa.fa-star-o data-rating=i
      small
      = link_to 'rate', new_exercise_rating_path(@exercise)
  br

table.vertical-table
  tr
    th
      = t('exercises.title')
      | :
    td
      = @exercise.title

  - if @exercise_relation
    tr
      th
        = 'Parent:'
      td
        - if @exercise_relation.origin
          = link_to @exercise_relation.origin.title, exercise_path(@exercise_relation.origin)
        - else
          = 'Parent was deleted'
    tr
      th
        = 'Relation'
      td
        = @exercise_relation.relation.name

  - @exercise.descriptions.each do |description|
    tr
      th
        = t('exercises.show.description')
        = description.language
        | :
      td
        = description.text
  tr
    th
      = t('exercises.visibility.label')
      | :
    td
      = @exercise.private ? t('exercises.visibility.private') : t('exercises.visibility.public')
  tr
    th
      = 'Execution Environment'
    td
      = @exercise.execution_environment.language
  tr
    th
      = t('exercises.created_by')
      | :
    - if !@exercise.user
      td
        = t('users.undefined')
    - elsif @exercise.user == current_user
      td
        = t('users.yourself')
    - elsif @exercise.user.first_name.nil? || current_user.role === 'user'
      td
        = "User#{@exercise.user.id}"
    - else
      td
        = @exercise.user.name
  tr
    th
      = t('exercises.created_at')
      | :
    td
      = @exercise.created_at
  tr
    th
      em
        = t('exercises.files.label')
        | :
    td
      table.vertical-table
        - @files.each do |file|
          - if file.purpose != 'test'
            tr
              td colspan=2
                .editor_readonly
                  = file.content
            tr
              th
                = 'Name'
              td
                = file.name
            tr
              th
                = t('exercises.files.path')
              td
                = file.path
            tr
              th
                = t('exercises.files.extension')
              td
                = file.file_type.name
            tr
              th
                = 'Role'
              td
                = file.role
            tr
              th
                = t('exercises.show.files.solution')
              td
                = file.solution
            br
  tr
    th
      em
        = t('exercises.tests.label')
        | :
    td
      table.vertical-table
        - @tests.each do |test|
          tr
            td colspan=2
              .editor_readonly
                = test.exercise_file.content
          tr
            th
              = t('exercises.tests.feedback')
            td
              = test.feedback_message
          tr
            th
              = t('exercises.tests.framework')
            td
              = test.testing_framework.name
  - if can? :export, Exercise
    tr
      th
        = t('exercises.show.export')
      td
        = form_tag(push_external_exercise_path(@exercise), method: "post") do |f|
          - if !current_user.account_links.empty?
            = collection_select(:account_link, :id, AccountLink.all, :id, :account_name, {},  {class: 'btn btn-default dropdown-toggle'})
            = button_tag t('exercises.show.submit'), class: 'btn btn-success btn-xs'
          - else
            = link_to t('exercises.show.define_account_link'), new_user_account_link_path(current_user)
    tr
      th = t('exercises.show.add_cart')
      td
        = link_to 'Add to cart', add_to_cart_path(@exercise), class: 'btn btn-main'
    tr
      th
        = t('exercises.show.add_collection')
      td
        - if !current_user.collections.empty?
          .btn-group[role="group"]
            = collection_select(:collection, :id, Collection.where(user: current_user), :id, :title, {}, {class: 'btn btn-default dropdown-toggle'})
            = button_tag 'Add to Collection', class: 'btn btn-main btn-sm'
        - else
          = link_to 'Add Collection', new_collection_path(current_user)
.actions.btn-group[role="group"]
  - if can? :edit, @exercise
    = link_to edit_exercise_path(@exercise),  class: 'btn btn-important' do
      i.fa.fa-edit style=("color: #008000")
      = ' ' + t('exercises.show.edit')
    = link_to exercise_path(@exercise), class:'btn btn-important', method: :delete, data: { confirm: t('sure') } do
      i.fa.fa-trash style=("color: #800000")
      = ' ' + t('exercises.show.delete')
  = link_to t('exercises.show.back'), exercises_path,  class: 'btn btn-important'
